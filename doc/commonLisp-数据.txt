数据 (Data)
Lisp 提供了所有我们在其他语言找的到的数据类型，和一些其他语言所找不到的。有一个
我们已经使用的类型是整数 (integer)，它用一系列的数字来表示： 256 。另一种与别的语
言一样的数据类型是字串 (string)，它用一系列被双引号包住的字符表示： “ora et
labora” [3] 。整数与字串都是对自身求值的。
[3] 是拉丁文，意思是祷告与工作。
两个通常我们在别的语言所找不到的 Lisp 数据类型是符号(symbol)与列表(lists)，符号是单
词 (words)。无论你怎么输入，通常它们被转换成大写：
1
2
> 'Artichoke
ARTICHOKE
符号（通常）不对自身求值，所以如果你想引用一个符号，你应该像上例那样 ' 引用它。
列表 是由被括号包住的零个或多个元素来表示。元素可以是任何类型，包括列表。你必须
引用列表，不然 Lisp 会以为这是一个函数调用：
1
2
3
4
> '(my 3 "Sons")
(MY 3 SONS)
> '(the list (a b c) has 3 elements)
(THE LIST (A B C) HAS 3 ELEMENTS)
注意一个引号保护了整个表达式，以及里面的表达式被求值。
你可以调用 list 来创建列表。因为 list 是一个函数，它的参数会被求值。这里我们看一
个在函数 list 调用里面，调用 + 函数的例子：
12-11-9 Chapter 2 ???? Lisp (W elcom e to Lisp) ρ ANSI Com m on Lisp ?????
5/24 ansi-com m on-lisp.readthedocs.org/en/latest/zhCN/ch2-cn.htm l
1
2
> (list 'my (+ 2 1) "Sons")
(MY 3 "Sons")
我们现在来到领悟 Lisp 最卓越的特性之一的地方。 Lisp的程序用列表来表示 。如果参数
的优雅与弹性不能说服你 Lisp 表示法是一个无价的工具，这里应该能使你信服。这意味着
Lisp 程序可以写出 Lisp 代码。 Lisp 程序员能（并且经常）写出能为自己写程序的程序。
到第 10 章我们才来考虑这种程序，但在现在了解列表和表达式的关系是非常重要的，而
不是被它们搞混。这也就是为什么我们需要 quote 。如果一个列表被引用了，则求值规则
对列表自身来求值；如果没有被引用，则列表被视为是代码，依求值规则对列表求值后，
返回它的值。
1
2
> (list '(+ 2 1) (+ 2 1))
((+ 2 1) (3))
这里第一个参数被引用了，所以产生一个列表。第二个参数没有被引用，视为函数调用，
经求值后得到一个数字。
在 Common Lisp 中有两种方法来表示空的列表。你可以用一对不包括任何东西的括号来
表示，或用符号 nil 来表示空表。你用哪种表示法来表示空表都没关系，但它会被显示为
nil ：
1
2
3
4
> ()
NIL
> nil
NIL
你不需要引用 nil (但引用也无妨)，因为 nil 是对自身求值的。