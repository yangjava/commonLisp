## 程序设计的基本元素

程序设计的每种语言都提供了三种机制:

1) 基本表达书形式 
	用于表达语言最简单的个体

2) 组合的方法
	从简单的东西构造出复合的元素

3) 抽象的方法
	为复合的对象命名,并将它们当做单元去处理

程序设计需要处理两类要素

1) 过程:操作数据的规则描述

2) 数据 : 我要需要处理操作的东西


## 1.1 表达式

一种基本的表达式 数字  
486  
486 
复合表达式
(+ 1 2)
3

(- 2 1)
1

(* 2 1)
2

(/ 2 1)
2

(+ 0.1 1)
1.1

上面 + - * / 是运算符 其他是运算对象
Lisp 使用的是 前缀表达式

前缀表达式有点:
1) 多个实参不会产生歧义
(+  1 2 3 4)
10

2) 可以深度嵌套
(+ (* 1 2 ) (- 6 3))
5

## 命名和环境

commonLisp 命名 使用let 函数
let可以引入新变量。
(let (variables* ) body-form*)

当let表达式被求值时，所有变量赋值将首先被求值，并在body实行之前进行绑定。在let执行结束后，这些变量将重新引用在执行let前它们所引用的内容，如果有的话。在下面的双顺序列表归并排序的代码中可以看到let的使用方法。
(let a 1)

 1
(let ((a 2)) (+ 5 a))
7

基本语法：(setf place value)，当place是一个变量时，则将value绑定到place。
此外CL支持用户自定义数据结构，可以给结构的任意位置赋值。

支持一次设置多个：(setf x 1 y 2)
其返回最后一个被赋值的值。

(setf a 2)
2

(* a 5)
10

(setf pi 3.14159)
3.14159

(setf radius 10)
10

(* pi radius)
31.4159

(self circle (* pi ( * radius radius )))
314.159

保存名字和值这种存储就是 环境

## 组合式的求值

求值特殊形式 

赋值语句

## 复合过程
(defun square (n) (* n n))
SQUARE

(square 3) 
9

(square ’(1 2 3 4 5)) 

 Error! Wrong type input to *

(square 3 4)

too many arguments given to  square


## 条件表达式和谓词

计算绝对值



