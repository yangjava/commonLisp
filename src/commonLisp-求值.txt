求值 (Evaluation)
上一小节中，我们在顶层输入表达式，然后 Lisp 显示它们的值。在这节里我们深入理解一
12-11-9 Chapter 2 ???? Lisp (W elcom e to Lisp) ρ ANSI Com m on Lisp ?????
3/24 ansi-com m on-lisp.readthedocs.org/en/latest/zhCN/ch2-cn.htm l
下表达式是如何被求值的。
在 Lisp 中， + 是一个函数，然而一个表达式如 (+ 2 3) 是一个函数调用。
当 Lisp 对函数调用求值时，它做这两个步骤：
1. 首先对参数从左至右求值。在这个情况是，每一个参数对自身求值，所以
参数的值分别是 2 跟 3 。
2. 参数的值传入以操作符命名的函数。在这个情况是，即 + 函数，返回 5 。
如果任何参数本身是函数调用，它们遵循上述规则。所以当 (/ (- 7 1) (- 4 2)) 被求值
时所发生的情况：
1. Lisp 对 (- 7 1) 求值: 7 求值为 7 ， 1 求值为 1 ，它们被传给函数 - ，返
回 6 。
2. Lisp 对 (- 4 2) 求值: 4 求值为 4 ， 2 求值为 2 ，它们被传给函数 - ，返
回 2 。
3. 数值 6 与 2 被传入函数 / ，返回 3 。
不是所有的 Common Lisp 操作符都是函数，但大部分是。而函数调用都是这样子求值。
对参数从左至右求值，然后将它们的数值传入函数，来返回整个表达式的值。这称为
Common Lisp 的求值规则。
Tip
逃离麻烦
如果你试着输入 Lisp 不能理解的东西，它会显示一个错误讯息，然后把你带到一种叫
做中断循环(b??reak loop)的顶层。 中断循环给予有经验的程序员一个机会来找出错误的原
因，不过最初你只会想知道如何从中断循环中跳出。 如何返回顶层取决于你所使用的
Common Lisp 实现。在这个假设的实现环境中，输入 :abort 跳出：
> (/ 1 0)
Error: Division by zero
Options: :abort, :backtrace
>> :abort
>
附录A 演示了 Lisp 程序如何除错，并给出一些常见的错误例子。
一个不遵守 Common Lisp 求值规则的操作符是 quote 。这 quote 是一个特殊操作符，意
味者他有自己特别的求值规则。而这个规则是：什么也不做。这 quote 操作符接受一个参
数，并逐字地返回它。
1
2
> (quote (+ 3 5))
(+ 3 5)
12-11-9 Chapter 2 ???? Lisp (W elcom e to Lisp) ρ ANSI Com m on Lisp ?????
4/24 ansi-com m on-lisp.readthedocs.org/en/latest/zhCN/ch2-cn.htm l
为了方便起见，Common Lisp 定义 ' 作为 quote 的缩写。你可以在任何表达式前贴上一个
' 得到与调用 quote 同样的效果：
1
2
> '(+ 3 5)
(+ 3 5)
使用缩写 ' 比使用整个 quote 表达式更常见。
Lisp 提供 quote 作为一种保护表达式被求值的方式。下一节会解释为什么这种保护很有
用。
