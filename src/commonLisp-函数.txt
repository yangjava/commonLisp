函数 (Functions)
你可以用 defun 来定义新函数。它通常接受三个以上的参数：一个名字，一列参数 (a list
of parameters)，及组成函数主体的一个或多个表达式。我们可能会这样定义 third ：
1
2
3
> (defun our-third (x)
(car (cdr (cdr x))))
OUR-THIRD
第一个参数说明此函数的名称将是 our-third 。第二个参数，一个列表 (x) ，说明这个函
数会接受一个参数 (parameter): x 。这样使用的占位符 (placeholder) 符号叫做变量。当变
量代表了传入函数的参数，如这里的 x ，又被叫做参数(parameter)。
定义的其它部分， (car (cdr (cdr x))) ，即所谓的函数主体 (the body of the function)。
它告诉 Lisp 怎么计算此函数的返回值。所以调用一个 our-third 函数，对于我们作为参数
传入的任何 x，会返回 (car (cdr (cdr x))) ：
1
2
> (our-third '(a b c d))
C
既然我们已经看过了变量，理解什么是符号就更简单了。它们是变量的名字，它们本身就
是以对象 (object)的方式存在。这也是为什么符号，必须像列表一样被引用。一个列表必须
被引用，不然会被视为代码。一个符号必须要被引用，不然会被当做变量。
你可以把函数定义想成广义版的 Lisp 表达式。下面的表达式测试 1 和 4 的和是否大于 3 ：
1 > (> (+ 1 4) 3)
12-11-9 Chapter 2 ???? Lisp (W elcom e to Lisp) ρ ANSI Com m on Lisp ?????
9/24 ansi-com m on-lisp.readthedocs.org/en/latest/zhCN/ch2-cn.htm l
2 T
藉由替换这些数字为变量，我们可以写一个函数，测试任两数之和是否大于第三个数：
1
2
3
4
5
> (defun sum-greater (x y z)
(> (+ x y) z))
SUM-GREATER
> (sum-greater 1 4 3)
T
Lisp 不对程序、过程 (procedure)及函数来作区别。函数做了所有的事情（事实上，函数是
语言的主要部分）。如果你想要把你的函数之一作为主函数(main function)，可以这么做，
但你平常就能在顶层中调用任何一个函数。这表示当你编程时，你可以把程序分成一小块
一小块地来作调试。